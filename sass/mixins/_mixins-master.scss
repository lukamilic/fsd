// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

$screen-lg: 1200px;
@mixin lg {  @media (max-width: #{$screen-lg}) { 
	   @content;  
}}

$screen-md-max: 767px;
@mixin md {  @media (max-width: #{$screen-md-max}) { 
	   @content;  
}}

$screen-md-min: 767px;
@mixin md-min {  @media (min-width: #{$screen-md-min}) { 
	   @content;  
}}

$screen-sm-max: 414px;
@mixin sm {  @media (max-width: #{$screen-sm-max}) { 
	   @content;  
}}

@mixin font($font-family, $font-file) {
	@font-face {
	  font-family: $font-family;
	  src: url($font-file+'.eot');
	  src: url($font-file+'.eot?#iefix') format('embedded-opentype'),
		   url($font-file+'.woff') format('woff'),
		   url($font-file+'.ttf') format('truetype'),
		   url($font-file+'.svg#aller') format('svg');
	  font-weight: normal;
	  font-style: normal;
	}
  }
 
  
  @include font('MyriadPro-Regular', 'sass/fonts/MyriadProRegular/MyriadPro-Regular');
  @include font('MyriadPro-Semibold', 'sass/fonts/MyriadProSemiBold/MyriadPro-Semibold');

// @include font-face(Myriad-Pro-Semi-Bold, '/fonts/MyriadProSemiBold');